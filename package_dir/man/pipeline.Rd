% Generated by roxygen2 (4.0.2): do not edit by hand
\name{pipeline}
\alias{pipeline}
\alias{pipeline_data_transformation}
\title{Applies a list of functions to a data frame in order to transform
columns.}
\usage{
pipeline(data = NULL, pipeline = NULL, envir = parent.frame(),
  final_names = NULL, multipath = FALSE)
}
\arguments{
\item{data}{A data frame which provides data and where resulting
columns are stored}

\item{pipeline}{A list of functions. Columns with names taken from
the list names are added to the data frame.  These columns are
generated by checking for pipeline function arguments first in
the data frame and then in the environments.  Once inputs are
found, they are used to run the function.  Inputs found in the
data.frame are always the same lenght, but inputs found in
'envir' need not be.}

\item{envir}{An environment which is searched for function arguments.}
}
\description{
Applies a list of functions to a data frame in order to transform
columns.
}
\details{
The function is generally pretty flexible---when multipath is set,
pipeline functions with missing arguments are simply ignored.  When a
pipeline element is a list of functions rather than a single
function, the first applicable function is used and the rest are
skipped, continuing with the first function of the top-level list.
This is a good way to code preferential data sources.
}

